services:
  db:
    image: postgres:15
    container_name: my_postgres
    environment:
      POSTGRES_DB: mydb
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
  telegram:
    build: .
    command: >
      sh -c "source tit-env/bin/activate &&
             pip install -r requirements.txt &&
             python manage.py migrate &&
             python manage.py start_telegram"
    depends_on:
      - db
    environment:
      POSTGRES_DB: mydb
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      TELEGRAM_API_HASH: ${TELEGRAM_API_HASH}
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      TELEGRAM_API_ID: ${TELEGRAM_API_ID}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_ENDPOINT: ${OPENAI_ENDPOINT}
      OPENAPI_MODEL: ${OPENAPI_MODEL}
    volumes:
      - .:/code
    ports:
      - "443:443"
      - "80:80"
  web:
    build: .
    command: >
      sh -c "source tit-env/bin/activate &&
             pip install -r requirements.txt &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    depends_on:
      - db
      - telegram
    environment:
      POSTGRES_DB: mydb
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
    volumes:
      - .:/code
    ports:
      - "8000:8000"
      - "443:443"
      - "80:80"
  celery:
    build: .
    command: >
      sh -c "source tit-env/bin/activate &&
             pip install -r requirements.txt &&
             python manage.py celery worker --loglevel=info"
    depends_on:
      - db
    environment:
      POSTGRES_DB: mydb
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_HOST: db
      POSTGRES_PORT: 5432
      TELEGRAM_API_HASH: ${TELEGRAM_API_HASH}
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      TELEGRAM_API_ID: ${TELEGRAM_API_ID}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_ENDPOINT: ${OPENAI_ENDPOINT}
      OPENAPI_MODEL: ${OPENAPI_MODEL}
    

volumes:
  postgres_data: