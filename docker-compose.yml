networks:
  backend: {}

services:
  redis:
    image: redis:7-alpine
    container_name: my_redis
    networks:
      - backend
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  db:
    image: postgres:15
    hostname: postgres
    container_name: my_postgres
    environment:
      POSTGRES_DB: mydb
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
    networks:
      - backend
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U myuser -d mydb"]
      interval: 10s
      timeout: 5s
      retries: 5
  telegram:
    build: .
    command: >
      sh -c ". tit-env/bin/activate &&
             pip install -r requirements.txt &&
             python manage.py migrate &&
             python manage.py start_telegram"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - backend
    environment:
      POSTGRES_DB: mydb
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      TELEGRAM_API_HASH: ${TELEGRAM_API_HASH}
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      TELEGRAM_API_ID: ${TELEGRAM_API_ID}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_ENDPOINT: ${OPENAI_ENDPOINT}
      OPENAPI_MODEL: ${OPENAPI_MODEL}
    volumes:
      - .:/code
    ports:
      - "443:443"
      - "80:80"
    restart: unless-stopped
  web:
    build: .
    command: >
      sh -c ". tit-env/bin/activate &&
             pip install -r requirements.txt &&
             python manage.py migrate &&
             python manage.py runserver 0.0.0.0:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
      telegram:
        condition: service_started
    environment:
      POSTGRES_DB: mydb
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
    volumes:
      - .:/code
    ports:
      - "8000:8000"
    restart: unless-stopped
    networks:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
  celery:
    build: .
    command: >
      sh -c ". tit-env/bin/activate &&
             pip install -r requirements.txt &&
             celery -A tit worker --loglevel=info"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      POSTGRES_DB: mydb
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      TELEGRAM_API_HASH: ${TELEGRAM_API_HASH}
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      TELEGRAM_API_ID: ${TELEGRAM_API_ID}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_ENDPOINT: ${OPENAI_ENDPOINT}
      OPENAPI_MODEL: ${OPENAPI_MODEL}
    volumes:
      - .:/code
    restart: unless-stopped
    networks:
      - backend

  celery-beat:
    build: .
    command: >
      sh -c ". tit-env/bin/activate &&
             pip install -r requirements.txt &&
             python manage.py migrate &&
             celery -A tit beat --loglevel=info --scheduler django_celery_beat.schedulers:DatabaseScheduler"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      POSTGRES_DB: mydb
      POSTGRES_USER: myuser
      POSTGRES_PASSWORD: mypassword
      POSTGRES_HOST: postgres
      POSTGRES_PORT: 5432
      CELERY_BROKER_URL: redis://redis:6379/0
      CELERY_RESULT_BACKEND: redis://redis:6379/0
      TELEGRAM_API_HASH: ${TELEGRAM_API_HASH}
      TELEGRAM_BOT_TOKEN: ${TELEGRAM_BOT_TOKEN}
      TELEGRAM_API_ID: ${TELEGRAM_API_ID}
      OPENAI_API_KEY: ${OPENAI_API_KEY}
      OPENAI_ENDPOINT: ${OPENAI_ENDPOINT}
      OPENAPI_MODEL: ${OPENAPI_MODEL}
    volumes:
      - .:/code
    restart: unless-stopped
    networks:
      - backend

volumes:
  postgres_data:
  redis_data: